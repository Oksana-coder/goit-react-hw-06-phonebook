{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Container/Container.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["actions","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","getContacts","state","contacts","items","getFilter","filter","getFilteredContacts","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","existingContacts","useSelector","dispatch","useDispatch","handleChange","event","target","value","className","onSubmit","preventDefault","newContact","map","contact","alert","type","onChange","pattern","title","required","Filter","currentTarget","ContactListItem","onDeleteContact","onClick","ContactList","Container","children","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.0a1e8422.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('contacts/delete');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nconst actions = { addContact, deleteContact, changeFilter };\nexport default actions;\n\n\n\n\n// import { v4 as uuidv4 } from 'uuid';\n// import types from './contacts-types';\n\n// const addContact = ({ name, number }) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// });\n\n// const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\n// const actions = { addContact, deleteContact, changeFilter };\n// export default actions;","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-actions';\nimport { getContacts } from '../../redux/contacts/contacts-selector';\nimport './ContactForm.scss';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const existingContacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      \n      case 'number':\n        setNumber(value);\n        break;\n      \n      default:\n        return;\n    }\n  };\n  \n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = name.toLowerCase();\n    const existingContactsNames = existingContacts.map(contact => contact.name.toLowerCase());\n    if (existingContactsNames.includes(newContact)) {\n      alert(`${newContact} is already in contacts.`);\n      return;\n    }\n\n    dispatch(actions.addContact({name, number}));\n    setName('');\n    setNumber('');\n  };\n  \n    return (\n      <form className=\"contact-form\" onSubmit={handleSubmit}>\n      <label className=\"contact-form__label\">\n        Name\n        <input\n          type=\"text\"\n          className=\"contact-form__input\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className=\"contact-form__label\">\n        Number\n        <input\n          type=\"tel\"\n          className=\"contact-form__input\"  \n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n        <button\n          type=\"submit\"\n          className=\"contact-form__btn\"\n        >\n        Add contact\n      </button> \n    </form>\n    )\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selector';\nimport './Filter.scss';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className=\"contact-filter\">\n      Find contacts by name\n      <input\n        type=\"text\"\n        className=\"contact-filter__input\"\n        value={value}\n        onChange={event => dispatch(actions.changeFilter(event.currentTarget.value))} />\n    </label>\n  );\n};\n\nexport default Filter;\n\n\n\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: (event) => dispatch(actions.changeFilter(event.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactListItem.scss';\n\nconst ContactListItem = ({ name, number, onDeleteContact }) => (\n  <>\n    <span>{name}: {number}</span>\n    <button type=\"button\" className=\"contact-list__delete-btn\" onClick={onDeleteContact}>Delete</button>\n  </>\n);\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactListItem from '../ContactListItem';\nimport actions from '../../redux/contacts/contacts-actions';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selector';\nimport './ContactList.scss';\n\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(actions.deleteContact(id));\n\n  return(\n  <ul>\n    {contacts.map(({ id, name, number}) => (\n      <li key={id} className=\"contact-list__item\">\n        <ContactListItem\n          name={name}\n          number={number}\n          onDeleteContact={() => onDeleteContact(id)}\n        />\n      </li>\n    ))}\n  </ul>\n);\n};\n\nexport default ContactList;\n\n\n\n\n// const getFilteredContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getFilteredContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: (id) => dispatch(actions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\nimport './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;","import ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList'\nimport Container from './components/Container';\nimport './App.scss';\n\nexport default function App() {\n\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        \n        <ContactList />\n      </Container>\n    )\n  }","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n\nconst existedContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst items = createReducer(existedContacts, {\n  [actions.addContact]: (state, { payload }) => [payload, ...state],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n})\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n\n\n// import { combineReducers } from 'redux';\n// import types from './contacts-types';\n\n// const existedContacts = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];\n\n// const items = (state = existedContacts, { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [payload, ...state];\n\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default combineReducers({\n//   items,\n//   filter,\n// });\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor  = persistStore(store);;\n\n\n\n\n// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import contactsReducer from './contacts/contacts-reducer';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport { store, persistor } from './redux/store';\nimport './index.scss';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}